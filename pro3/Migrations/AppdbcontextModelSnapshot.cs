// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using pro3.Models;

#nullable disable

namespace pro3.Migrations
{
    [DbContext(typeof(Appdbcontext))]
    partial class AppdbcontextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("pro3.Models.Addon", b =>
                {
                    b.Property<int>("AddOnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("AddOnDailyRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("AddOnName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("RateValidUntil")
                        .HasColumnType("datetime(6)");

                    b.HasKey("AddOnId");

                    b.ToTable("Addon");
                });

            modelBuilder.Entity("pro3.Models.Airport", b =>
                {
                    b.Property<int>("AirportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AirportCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AirportName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("HubId")
                        .HasColumnType("int");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.HasKey("AirportId");

                    b.HasIndex("CityId");

                    b.HasIndex("HubId");

                    b.HasIndex("StateId");

                    b.ToTable("Airport");
                });

            modelBuilder.Entity("pro3.Models.Booking", b =>
                {
                    b.Property<long>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("CarTypeId")
                        .HasColumnType("bigint");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<decimal>("DailyRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("MonthlyRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("P_HubId")
                        .HasColumnType("int");

                    b.Property<int?>("PickupHubHubId")
                        .HasColumnType("int");

                    b.Property<string>("Pin")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("R_HubId")
                        .HasColumnType("int");

                    b.Property<int?>("ReturnHubHubId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("WeeklyRate")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("BookingId");

                    b.HasIndex("CarTypeId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PickupHubHubId");

                    b.HasIndex("ReturnHubHubId");

                    b.ToTable("Booking");
                });

            modelBuilder.Entity("pro3.Models.BookingDetail", b =>
                {
                    b.Property<long>("BookingDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("AddonId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("AddonRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("BookingId")
                        .HasColumnType("bigint");

                    b.HasKey("BookingDetailId");

                    b.HasIndex("BookingId");

                    b.ToTable("BookingDetail");
                });

            modelBuilder.Entity("pro3.Models.Car", b =>
                {
                    b.Property<long>("CarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Car_ID");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("CarName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Car_Name");

                    b.Property<long>("CarTypeId")
                        .HasColumnType("bigint");

                    b.Property<int>("HubId")
                        .HasColumnType("int");

                    b.Property<int>("IsAvailable")
                        .HasColumnType("int")
                        .HasColumnName("Is_Available");

                    b.Property<DateTime>("MaintenanceDueDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("Maintenance_Due_Date");

                    b.Property<double>("Mileage")
                        .HasColumnType("double");

                    b.Property<string>("NumberPlate")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Number_Plate");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Status");

                    b.HasKey("CarId");

                    b.HasIndex("CarTypeId");

                    b.HasIndex("HubId");

                    b.ToTable("Car");
                });

            modelBuilder.Entity("pro3.Models.CarType", b =>
                {
                    b.Property<long>("CarTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("CarType_Id");

                    b.Property<string>("CarTypeName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("CarType_Name");

                    b.Property<double>("DailyRate")
                        .HasColumnType("double")
                        .HasColumnName("Daily_Rate");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Image_Path");

                    b.Property<double>("MonthlyRate")
                        .HasColumnType("double")
                        .HasColumnName("Monthly_Rate");

                    b.Property<double>("WeeklyRate")
                        .HasColumnType("double")
                        .HasColumnName("Weekly_Rate");

                    b.HasKey("CarTypeId");

                    b.ToTable("CarType");
                });

            modelBuilder.Entity("pro3.Models.City", b =>
                {
                    b.Property<int?>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("StateId")
                        .HasColumnType("int")
                        .HasColumnName("State_Id");

                    b.HasKey("CityId");

                    b.HasIndex("StateId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("pro3.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Customer_Id");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Address_Line1");

                    b.Property<string>("AddressLine2")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Address_Line2");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("City");

                    b.Property<string>("CreditCardNumber")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Credit_Card_Number");

                    b.Property<string>("CreditCardType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Credit_Card_Type");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("Date_Of_Birth");

                    b.Property<string>("DrivingLicenseNumber")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Driving_License_Number");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("First_Name");

                    b.Property<string>("IdpNumber")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Idp_Number");

                    b.Property<string>("IssuedByDL")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Issued_By_DL");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Last_Name");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Mobile_Number");

                    b.Property<DateTime>("PassportIssueDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("Passport_Issue_Date");

                    b.Property<string>("PassportIssuedBy")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Passport_Issued_By");

                    b.Property<string>("PassportNumber")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Passport_Number");

                    b.Property<DateTime>("PassportValidFrom")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("Passport_Valid_From");

                    b.Property<DateTime>("PassportValidThrough")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("Passport_Valid_Through");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Password");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Phone_Number");

                    b.Property<string>("Pincode")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Pincode");

                    b.Property<DateTime>("ValidThroughDL")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("Valid_Through_DL");

                    b.HasKey("CustomerId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("pro3.Models.Hub", b =>
                {
                    b.Property<int?>("HubId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Hub_Id");

                    b.Property<int?>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("City_Id");

                    b.Property<long>("ContactNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("Contact_Number");

                    b.Property<string>("HubAddressAndDetails")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Hub_Address_and_Details");

                    b.Property<string>("HubName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Hub_Name");

                    b.Property<int?>("StateId")
                        .HasColumnType("int")
                        .HasColumnName("State_Id");

                    b.HasKey("HubId");

                    b.HasIndex("CityId");

                    b.HasIndex("StateId");

                    b.ToTable("Hub");
                });

            modelBuilder.Entity("pro3.Models.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Invoice_Id");

                    b.Property<int>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("Booking_Id");

                    b.Property<string>("CAadharNo")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("C_AadharNo");

                    b.Property<string>("CEmailId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("C_EmailId");

                    b.Property<string>("CMobileNo")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("C_MobileNo");

                    b.Property<string>("CName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("C_Name");

                    b.Property<string>("CPassNo")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("C_PassNo");

                    b.Property<int>("CarId")
                        .HasColumnType("int")
                        .HasColumnName("Car_Id");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("Customer_Id");

                    b.Property<string>("EmpName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Emp_Name");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("End_Date");

                    b.Property<DateTime>("HandoverDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("Handover_Date");

                    b.Property<string>("IsReturned")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Is_Returned");

                    b.Property<int>("PHubId")
                        .HasColumnType("int")
                        .HasColumnName("P_Hub_Id");

                    b.Property<int>("RHubId")
                        .HasColumnType("int")
                        .HasColumnName("R_Hub_Id");

                    b.Property<double>("Rate")
                        .HasColumnType("double")
                        .HasColumnName("Rate");

                    b.Property<double>("RentalAmount")
                        .HasColumnType("double")
                        .HasColumnName("Rental_Amount");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("Start_Date");

                    b.Property<double>("TotalAddonAmount")
                        .HasColumnType("double")
                        .HasColumnName("Total_Addon_Amount");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("double")
                        .HasColumnName("Total_Amount");

                    b.HasKey("InvoiceId");

                    b.ToTable("Invoice");
                });

            modelBuilder.Entity("pro3.Models.InvoiceDetail", b =>
                {
                    b.Property<int>("InvoiceDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Invoice_Detail_Id");

                    b.Property<int>("AddonId")
                        .HasColumnType("int")
                        .HasColumnName("Addon_Id");

                    b.Property<decimal>("AddonRate")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Addon_Rate");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int")
                        .HasColumnName("Invoice_Id");

                    b.HasKey("InvoiceDetailId");

                    b.HasIndex("InvoiceId");

                    b.ToTable("InvoiceDetail");
                });

            modelBuilder.Entity("pro3.Models.State", b =>
                {
                    b.Property<int?>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("StateName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("StateId");

                    b.ToTable("State");
                });

            modelBuilder.Entity("pro3.Models.Airport", b =>
                {
                    b.HasOne("pro3.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("pro3.Models.Hub", "Hub")
                        .WithMany()
                        .HasForeignKey("HubId");

                    b.HasOne("pro3.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.Navigation("City");

                    b.Navigation("Hub");

                    b.Navigation("State");
                });

            modelBuilder.Entity("pro3.Models.Booking", b =>
                {
                    b.HasOne("pro3.Models.CarType", "CarType")
                        .WithMany()
                        .HasForeignKey("CarTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pro3.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pro3.Models.Hub", "PickupHub")
                        .WithMany()
                        .HasForeignKey("PickupHubHubId");

                    b.HasOne("pro3.Models.Hub", "ReturnHub")
                        .WithMany()
                        .HasForeignKey("ReturnHubHubId");

                    b.Navigation("CarType");

                    b.Navigation("Customer");

                    b.Navigation("PickupHub");

                    b.Navigation("ReturnHub");
                });

            modelBuilder.Entity("pro3.Models.BookingDetail", b =>
                {
                    b.HasOne("pro3.Models.Booking", "Booking")
                        .WithMany("BookingDetails")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("pro3.Models.Car", b =>
                {
                    b.HasOne("pro3.Models.CarType", "CarType")
                        .WithMany()
                        .HasForeignKey("CarTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pro3.Models.Hub", "Hub")
                        .WithMany()
                        .HasForeignKey("HubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarType");

                    b.Navigation("Hub");
                });

            modelBuilder.Entity("pro3.Models.City", b =>
                {
                    b.HasOne("pro3.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.Navigation("State");
                });

            modelBuilder.Entity("pro3.Models.Hub", b =>
                {
                    b.HasOne("pro3.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("pro3.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.Navigation("City");

                    b.Navigation("State");
                });

            modelBuilder.Entity("pro3.Models.InvoiceDetail", b =>
                {
                    b.HasOne("pro3.Models.Invoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("pro3.Models.Booking", b =>
                {
                    b.Navigation("BookingDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
